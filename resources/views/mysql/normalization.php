@extends('layout.master')
@section('index')

<div class="row">
    <div class="col-sm-10">
        <h2>Сервер MySQL</h2>
        <p></p>
        <h3>7. Нормализация базы данных MySQL</h3>
        <p>Под нормализацией понимается приведение базы данных к оптимальному состоянию, которое
            характеризуется следующими признаками:<br/>
        <ul>
            <li>Отсутствие избыточности хранения данных - данные не дублируются;</li>
            <li>Наличие прозрачных, логически и интуитивно-понятных связей между данными;</li>
            <li>Возможность масштабирования данных, добавления новых таблиц и связей;</li>
            <li>Минимальная вероятность возникновения ошибок;</li>
            <li>Оптимальность использования дискового пространства.</li>
        </ul>
        <p>Для приведения базы к нормальному состоянию, при ее проектировании, должны быть соблюдены
            основные правила нормализации также называемые <strong>нормальными формами (НФ)</strong>.
        </p>
        <h3>
            <div class="label label-default"><strong>Первая нормальная форма (1НФ)</strong></div>
        </h3>
        <div class="alert alert-success">
            Таблица находится в первой нормальной форме, если все ее атрибуты атомарны,
            то есть каждая ячейка таблицы содержит одно единственное значение, которое нельзя
            разделить на более простые, соответствующие каким-то другим свойствам описываемой сущности.
        </div>
        <p>Рассмотрим подробнее на примере приведенной ниже таблицы с данными о поставщиках:</p>
        <p><img src="/public/img/mysql/providers1.jpeg"></p>
        <p>Как мы видим в колонке info хранится информация, которая содержит, город, улицу и контактный номер телефона
            поставщика. Исходя из требований 1НФ такое хранение информации является неправильным, и если к примеру нам
            потребуется сделать выборку по поставщикам, которые находятся в определенном городе или на определенной
            улице,
            или имеют определенный номер телефона, то сделать такую выборку будет потенциально проблематичным.</p>
        <p>Для того, чтобы таблица удовлетворяла требованиям 1НФ необходимо данные поставщика разнести в отдельные
            колонки.</p>
        <p><img src="/public/img/mysql/providers12.jpeg"></p>
        <h3>
            <div class="label label-default"><strong>Вторая нормальная форма (2НФ)</strong></div>
        </h3>
        <div class="alert alert-success">
            Таблица находится во второй нормальной форме, если она находится в первой нормальной форме и все ее поля,
            которые не входят в первичный ключ находятся в зависимости исключительно от него.
        </div>
        <p>Для примера возьмем таблицу поставщиков осуществляющих поставку некоторого товара по определенной цене:</p>
        <p><img src="/public/img/mysql/providers.jpeg"></p>
        <p>Данная таблица содержит наименование поставщика, его город, улицу и номер телефона, а также
            поставляемый им товар и стоимость товара.</p>
        <p>Рассмотрев содержимое данной таблицы мы явно видим повторяющиеся значения наменования поставщика
            и его контактных данных, которые описаны для каждого поставляемого товара. Налицо избыточность данных.
            Суть проблемы заключается в том, что в одну таблицу помещено несколько отдельных сущностей.
            Для нормализации данных необходимо все данные строго не зависящие от первичного ключа вынести в отдельные
            таблицы, которые будут связаны между собой внешними ключами.
        </p>
        <p>Первое на что мы обратим внимание это поле <b>city</b>. Мы видим что в городе Kiev находится две компании:
            <b>LLC BusinessConsultingGroup</b> и <b>Company Holding Group</b>. Это говорит нам о том, что данное поле не
            связано строго с первичным ключем-идентификатором компании, таким образом мы можем создать отдельную
            табличку,
            которая будет содержать справочник городов <b>cities</b>:</p>
        <p><img src="/public/img/mysql/cities.jpeg"></p>
        <p>Далее мы рассмотрим колонку <b>product</b> исходной таблицы и увидим, что есть два поставщика, поставляющих
            один и тот же товар
            <b>Table</b>. По аналогии с городами это дает нам понять, что значения колонки <b>product</b> также не
            привязаны
            строго к идентификатору компании поставщика. Значит значения данной колонки также должны быть вынесены в
            отдельную
            таблицу товаров <b>Products:</b></p>
        <p><img src="/public/img/mysql/products.jpeg"></p>
        <p>И наконец колонка цены <b>price</b>. Проанализировав данные мы приходим к выводу, что стоимость товара
            сторого
            не зависит от идентификатора компании. На нее влияют два фактора: наименование самого товара и наименование
            его поставщика.</p>
        <p>Таким образом, строго зависящими от идентификатора компании являются только поля содержащие
            наименование <b>company</b>, адрес <b>address</b> и номер телефона <b>phone</b>. Эти данные мы выносим в
            отдельную
            таблицу поставщиков <b>Providers</b>, где информация о городе компании определена внешним ключем
            <b>city_id</b>:</p>
        <p><img src="/public/img/mysql/providers4.jpeg"></p>
        <p>Итоговую информацию о стоимости товара теперь можно представить в виде таблицы <b>prices</b>:</p>
        <p><img src="/public/img/mysql/prices.jpeg"></p>
        <p>Как видим выше, стоимость товара определяется идентификатором поставщика <b>provider_id</b> и идентификатором
            товара
            <b>product_id</b>.</p>
        <p>Все, таким образом наша база приведена ко второй (2НФ) нормальной форме. Все данные исходной таблицы строго
            не зависящие
            от первичного ключа вынесены в отдельные таблицы. При этом устранено дублирование и избыточность данных.</p>
    </div>
    <div class="col-sm-2">
        @include('mysql.menu')
    </div>
</div>
@endsection